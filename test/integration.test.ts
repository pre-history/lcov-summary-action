import { describe, it } from 'node:test';
import assert from 'node:assert';
import * as fs from 'node:fs';
import { parseLcov } from '../src/lcov_parser';
import { generateSummary, generateDetailedSummary } from '../src/summary';

// Test functions directly to achieve better coverage
describe('index.ts integration tests', () => {
  it('should validate hex colors correctly', () => {
    // Test hex color validation regex directly
    const hexColorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
    
    assert.ok(hexColorRegex.test('#4CAF50'), 'Should validate 6-digit hex');
    assert.ok(hexColorRegex.test('#F53'), 'Should validate 3-digit hex');
    assert.ok(!hexColorRegex.test('invalid'), 'Should reject invalid colors');
    assert.ok(!hexColorRegex.test('#GGGGGG'), 'Should reject invalid characters');
  });

  it('should validate badge styles correctly', () => {
    // Test badge style validation directly
    const validStyles = ['flat', 'flat-square', 'plastic', 'for-the-badge', 'social'];
    const isValidBadgeStyle = (style: string) => validStyles.includes(style);

    assert.ok(isValidBadgeStyle('flat'), 'Should accept flat style');
    assert.ok(isValidBadgeStyle('flat-square'), 'Should accept flat-square style');
    assert.ok(isValidBadgeStyle('for-the-badge'), 'Should accept for-the-badge style');
    assert.ok(!isValidBadgeStyle('invalid-style'), 'Should reject invalid styles');
  });

  it('should generate coverage badges correctly', () => {
    // Test badge generation logic directly
    const generateCoverageBadge = (percentage: number, style: string) => {
      let color = 'red';
      if (percentage >= 80) color = 'brightgreen';
      else if (percentage >= 60) color = 'yellow';
      else if (percentage >= 40) color = 'orange';
      
      const url = `https://img.shields.io/badge/Coverage-${percentage}%25-${color}?style=${style}`;
      const markdown = `![Coverage](${url})`;
      
      return { url, markdown };
    };

    // Test badge generation for different coverage levels
    const testCases = [
      { percentage: 0, expectedColor: 'red' },
      { percentage: 45, expectedColor: 'orange' },
      { percentage: 65, expectedColor: 'yellow' },
      { percentage: 85, expectedColor: 'brightgreen' }
    ];

    testCases.forEach(({ percentage, expectedColor }) => {
      const badge = generateCoverageBadge(percentage, 'flat');
      
      assert.ok(badge.url.includes(expectedColor), `${percentage}% should use ${expectedColor}`);
      assert.ok(badge.url.includes(`${percentage}%25`), 'Should include percentage in URL');
      assert.ok(badge.markdown.startsWith('![Coverage]'), 'Should generate markdown format');
      assert.ok(badge.url.includes('style=flat'), 'Should include style parameter');
    });
  });

  it('should parse LCOV files correctly', () => {
    // Test actual LCOV parsing with fixture data
    const lcovContent = fs.readFileSync('test/fixtures/50lcov.info.sample', 'utf8');
    const result = parseLcov(lcovContent);

    assert.equal(result.percentage, 50, 'Should parse 50% coverage correctly');
    assert.equal(result.covered, 5, 'Should parse covered lines correctly');
    assert.equal(result.not_covered, 5, 'Should parse uncovered lines correctly');
    assert.ok(Array.isArray(result.files), 'Should return files array');
    assert.equal(result.files.length, 1, 'Should have one file');
    assert.equal(result.files[0].filename, 'example.rb', 'Should parse filename correctly');
  });

  it('should generate summaries correctly', () => {
    // Test summary generation with real data
    const summary = generateSummary(75, 25, {
      title: 'Test Coverage',
      primary_color: '#4CAF50',
      secondary_color: '#FF5733'
    });

    assert.ok(summary.includes('Test Coverage'), 'Should include custom title');
    assert.ok(summary.includes('75'), 'Should include covered count');
    assert.ok(summary.includes('25'), 'Should include uncovered count');
    assert.ok(summary.includes('#4CAF50'), 'Should include custom primary color');
    assert.ok(summary.includes('#FF5733'), 'Should include custom secondary color');
    assert.ok(summary.includes('Generated by LCovMan ðŸ¦•'), 'Should include LCovMan signature');
  });

  it('should generate detailed summaries with real data', () => {
    // Test detailed summary generation with real LCOV data
    const lcovContent = fs.readFileSync('test/fixtures/real-lcov.info.sample', 'utf8');
    const result = parseLcov(lcovContent);
    
    const detailedSummary = generateDetailedSummary(result, null, {
      title: 'Integration Test Coverage',
      generate_badge: true,
      badge_style: 'flat-square',
      coverage_threshold: 50,
      show_files: true,
      max_files_shown: 5
    });

    assert.ok(detailedSummary.includes('Integration Test Coverage'), 'Should include custom title');
    assert.ok(detailedSummary.includes('Generated by LCovMan ðŸ¦•'), 'Should include signature');
    assert.ok(detailedSummary.includes('Coverage Badge'), 'Should include badge section');
    assert.ok(detailedSummary.includes('flat-square'), 'Should use specified badge style');
    assert.ok(detailedSummary.includes('%'), 'Should include coverage percentage');
  });
});