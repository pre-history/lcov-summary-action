// node test runner
import { describe, it } from 'node:test';
import assert from 'node:assert';
import * as fs from 'node:fs';

import { generateSummary, generateDetailedSummary } from '../src/summary';
import { parseLcov, compareLcov } from '../src/lcov_parser';

describe('summary diagram generator', () => {
  it('should return the summary diagram', () => {
    const covered = 50;
    const not_covered = 50;
    const expected = `## 📊 Project Coverage

\`\`\`mermaid
  %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#4CAF50', 'secondaryColor': '#FF5733',  'primaryTextColor': '#777', 'darkMode': { 'primaryTextColor': '#777'  } }}}%%
    pie showData
    title Project Coverage
    "Covered" : ${covered}
    "Not covered" : ${not_covered}
\`\`\`

---
*Generated by LCovMan 🦕*`;
    assert.equal(generateSummary(covered, not_covered), expected);
  });

  it('should return the summary diagram with custom Options', () => {
    const covered = 20;
    const not_covered = 80;
    const primary_color = '#1342a8';
    const secondary_color = '#ce650b';
    const title = 'Test Coverage';
    const expected = `## 📊 ${title}

\`\`\`mermaid
  %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '${secondary_color}', 'secondaryColor': '${primary_color}',  'primaryTextColor': '#777', 'darkMode': { 'primaryTextColor': '#777'  } }}}%%
    pie showData
    title ${title}
    "Covered" : ${covered}
    "Not covered" : ${not_covered}
\`\`\`

---
*Generated by LCovMan 🦕*`;

    assert.equal(
      generateSummary(covered, not_covered, {
        secondary_color,
        primary_color,
        title,
      }),
      expected,
    );
  });
});

describe('integration tests', () => {
  it('should generate detailed summary with real LCOV data', () => {
    const lcovContent = fs.readFileSync(
      'test/fixtures/50lcov.info.sample',
      'utf8',
    );
    const result = parseLcov(lcovContent);

    const summary = generateDetailedSummary(result, null, {
      title: 'Test Coverage Report',
      primary_color: '#4CAF50',
      secondary_color: '#FF5733',
      coverage_threshold: 70,
      generate_badge: true,
      badge_style: 'flat-square',
    });

    // Verify summary contains expected content
    assert.ok(
      summary.includes('Test Coverage Report'),
      'Should contain custom title',
    );
    assert.ok(
      summary.includes('Generated by LCovMan 🦕'),
      'Should contain LCovMan signature',
    );
    assert.ok(
      summary.includes('Coverage Badge'),
      'Should contain badge section',
    );
    assert.ok(
      summary.includes('Copy this to your README.md'),
      'Should contain badge instructions',
    );
    assert.ok(summary.includes('50%'), 'Should contain coverage percentage');
    assert.ok(
      summary.includes('Threshold: ❌ 70%'),
      'Should show threshold failure for 50% vs 70%',
    );
  });

  it('should generate coverage comparison diff', () => {
    const currentLcov = fs.readFileSync(
      'test/fixtures/50lcov.info.sample',
      'utf8',
    );
    const baseLcov = fs.readFileSync('test/fixtures/0lcov.info.sample', 'utf8');

    const current = parseLcov(currentLcov);
    const base = parseLcov(baseLcov);
    const diff = compareLcov(current, base);

    assert.ok(diff, 'Should return diff object');
    assert.ok(
      diff!.percentage_diff > 0,
      'Should show improvement from 0% to 50%',
    );
    assert.equal(
      diff!.percentage_diff,
      50,
      'Should show exactly 50% improvement',
    );

    // Test detailed summary with diff
    const summaryWithDiff = generateDetailedSummary(current, diff, {
      title: 'Coverage Improvement',
      coverage_threshold: 40,
    });

    assert.ok(
      summaryWithDiff.includes('Coverage Changes 📈'),
      'Should show improvement emoji',
    );
    assert.ok(summaryWithDiff.includes('+50%'), 'Should show positive change');
    assert.ok(summaryWithDiff.includes('✅ 40%'), 'Should pass 40% threshold');
  });

  it('should handle badge generation for different coverage levels', () => {
    const testCases = [
      {
        fixture: '0lcov.info.sample',
        expectedColor: 'red',
        expectedEmoji: '❌',
      },
      {
        fixture: '50lcov.info.sample',
        expectedColor: 'orange',
        expectedEmoji: '⚠️',
      },
      {
        fixture: '100lcov.info.sample',
        expectedColor: 'brightgreen',
        expectedEmoji: '✅',
      },
    ];

    testCases.forEach(({ fixture, expectedColor, expectedEmoji }) => {
      const lcovContent = fs.readFileSync(`test/fixtures/${fixture}`, 'utf8');
      const result = parseLcov(lcovContent);

      const summary = generateDetailedSummary(result, null, {
        generate_badge: true,
        badge_style: 'for-the-badge',
        coverage_threshold: 80,
      });

      assert.ok(
        summary.includes(expectedColor),
        `Should use ${expectedColor} for ${fixture}`,
      );
      assert.ok(
        summary.includes('for-the-badge'),
        'Should use correct badge style',
      );

      if (result.percentage >= 80) {
        assert.ok(summary.includes('✅ 80%'), 'Should pass threshold');
      } else {
        assert.ok(summary.includes('❌ 80%'), 'Should fail threshold');
      }
    });
  });

  it('should show file breakdown for detailed summary', () => {
    const lcovContent = fs.readFileSync(
      'test/fixtures/real-lcov.info.sample',
      'utf8',
    );
    const result = parseLcov(lcovContent);

    const summary = generateDetailedSummary(result, null, {
      show_files: true,
      max_files_shown: 5,
    });

    assert.ok(result.files.length > 0, 'Should have parsed individual files');
    assert.ok(
      summary.includes('Files with Low Coverage'),
      'Should show low coverage section',
    );
    assert.ok(summary.includes('src/'), 'Should show source files');

    // Check file-level details
    result.files.forEach((file) => {
      assert.ok(typeof file.filename === 'string', 'File should have name');
      assert.ok(
        typeof file.percentage === 'number',
        'File should have percentage',
      );
      assert.ok(
        typeof file.covered === 'number',
        'File should have covered lines',
      );
      assert.ok(typeof file.total === 'number', 'File should have total lines');
    });
  });
});
